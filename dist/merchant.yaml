openapi: 3.0.0
info:
  title: CITADEL Merchant
  version: 0.0.1
  description: '


    CITADEL Merchant API.


    This API provides simplified access to BitShares DEX.


    To use this API, an API Secret must be obtained.


    ##### Deposit


    To deposit tokens to a dummy account, please use bitshares-ui or

    CITADEL Desktop.


    ##### Withdraw


    To withdraw coins, you can use passive gateway interface, e.g.

    send an OPEN.BTC transfer to openledger-wallet with a memo of

    "btc:SOME_BTC_ADDR".


    This will be simplified in the next version of the API.


    ##### Auth


    Each API call must contain a special header, called "X-Citadel-Auth".

    The value for this header is your API Secret, obtained form the <a href="/merchant">Dashboard</a>.


    ##### SDKs and code samples


    None at the moment.


    '
paths:
  /v1/accounts:
    put:
      tags: [merchant]
      operationId: create_account
      description: Create new dummy account.
      parameters: []
      responses:
        200:
          content:
            application/json:
              schema: {$ref: '#/components/schemas/DummyAccountInfo'}
          description: New dummy account
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: ''
    get:
      tags: [merchant]
      operationId: list_accounts
      description: Get a list of all your dummy accounts.
      parameters: []
      responses:
        200:
          content:
            application/json:
              schema:
                items: {$ref: '#/components/schemas/DummyAccountInfo'}
                type: array
          description: Array of dummy accounts.
  /v1/accounts/{name}:
    get:
      tags: [merchant]
      operationId: get_account
      description: Get information about dummy account identified by {name}.
      parameters:
      - required: true
        name: name
        in: path
        description: Dummy account username.
        schema:
          type: string
        example: user52
      responses:
        200:
          content:
            application/json:
              schema: {$ref: '#/components/schemas/DummyAccountInfo'}
          description: Information about dummy account.
  /v1/accounts/{name}/balances:
    get:
      tags: [merchant]
      operationId: get_account_balances
      description: List balances for dummy account identified by {name}.
      parameters:
      - required: true
        name: name
        in: path
        description: Dummy account username.
        schema:
          type: string
        example: user52
      responses:
        200:
          content:
            application/json:
              schema:
                example: {BTS: '0.02500', OPEN.BTC: '0.0100000'}
                type: dict
          description: A dictionary containing assets symbols as keys and balances
            as values.
  /v1/accounts/{name}/transfer:
    put:
      tags: [merchant]
      operationId: create_dummytransfer
      description: Transfer fund from account {name} to an arbitrary BitShares account.
      parameters: []
      responses:
        200:
          content:
            application/json:
              schema: {type: boolean}
          description: True on success, False on failure
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                asset:
                  type: string
                  description: ''
                amount:
                  type: string
                  description: ''
                to:
                  type: string
                  description: ''
                memo:
                  type: string
                  description: ''
                fee_asset:
                  type: string
                  description: ''
  /v1/accounts/{name}/orders:
    get:
      tags: [merchant]
      operationId: list_dummyorders
      description: Get a list of all open orders for a dummy account.
      parameters:
      - required: true
        name: name
        in: path
        description: Dummy account username.
        schema:
          type: string
        example: user52
      responses:
        200:
          content:
            application/json:
              schema:
                items: {$ref: '#/components/schemas/DummyOrder'}
                type: array
          description: Array of account orders.
    put:
      tags: [merchant]
      operationId: create_dummyorder
      description: Create new limit order on the market.
      parameters: []
      responses:
        200:
          content:
            application/json:
              schema:
                example: {order_id: 1.7.149752523}
                type: dict
          description: Unique Order ID for new newly created limit order.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                input_asset:
                  type: string
                  description: ''
                input_amount:
                  type: string
                  description: ''
                output_asset:
                  type: string
                  description: ''
                output_amount:
                  type: string
                  description: ''
                expiration:
                  type: integer
                  description: ''
                fill_or_kill:
                  type: boolean
                  description: ''
  /v1/accounts/{name}/orders/{order_id}:
    delete:
      tags: [merchant]
      operationId: cancel_dummyorder
      description: Cancel order identified by {order_id}.
      parameters:
      - required: false
        name: name
        in: path
        description: ''
        schema:
          type: string
        example: user52
      - required: false
        name: order_id
        in: path
        description: ''
        schema:
          type: string
        example: 1.7.180190
      responses:
        200:
          content:
            application/json:
              schema: {type: boolean}
          description: True if an order was removed.
servers:
- {url: 'https://citadel.li/merchant_api'}
- {url: 'http://citadel2miawoaqw.onion/merchant_api'}
tags:
- {description: Internal CITADEL API. No warranty., name: internal}
- {description: '', name: merchant}
components:
  schemas:
    DummyAccountInfo:
      properties:
        username: {type: string}
        bitshares_id: {type: string}
      type: object
    DummyAccountInput:
      properties:
        username: {type: string}
      type: object
    DummyOrder:
      properties:
        input_asset: {required: true, type: string}
        input_amount: {required: true, type: string}
        output_asset: {required: true, type: string}
        output_amount: {required: true, type: string}
        expiration: {type: string}
        order_id: {type: string}
        seller_id: {type: string}
        seller_name: {type: string}
        price_asset: {type: string}
        price_amount: {type: string}
      type: object
    DummyOrderInput:
      properties:
        input_asset: {required: true, type: string}
        input_amount: {required: true, type: string}
        output_asset: {required: true, type: string}
        output_amount: {required: true, type: string}
        expiration: {type: integer}
        fill_or_kill: {type: boolean}
      type: object
    ErrorResponse:
      properties:
        success: {required: true, type: boolean}
        error:
          properties:
            code: {type: integer}
            message: {type: string}
          type: object
      type: object
    MerchantAccountInfo:
      properties:
        username: {type: string}
      type: object
    MerchantAccountInput:
      properties:
        username: {required: true, type: string}
        password: {required: true, type: string}
        verification_response: {required: true, type: string}
      type: object
    MerchantAccountToken:
      properties:
        token: {type: string}
        expires_in: {type: integer}
      type: object
    MerchantServiceEdit:
      properties:
        title: {required: true, type: string}
        url: {required: true, type: string}
      type: object
    MerchantServiceInfo:
      properties:
        name: {type: string}
        title: {type: string}
        url: {type: string}
        api_key: {type: string}
      type: object
    MerchantServiceInput:
      properties:
        name: {required: true, type: string}
        title: {required: true, type: string}
        url: {required: true, type: string}
      type: object
    MerchantServiceNonce:
      properties:
        name: {type: string}
        api_secret: {type: string}
      type: object
    TransferInput:
      properties:
        asset: {required: true, type: string}
        amount: {required: true, type: string}
        to: {required: true, type: string}
        memo: {type: string}
        fee_asset: {type: string}
      type: object
  securitySchemes:
    APISecret: {in: header, name: X-Citadel-Auth, type: apiKey}
security:
- APISecret: []

